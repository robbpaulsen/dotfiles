#!/usr/bin/env bash

#######################################################
## ██████╗  ███████╗ ██████╗  ██╗    ██╗ ███╗   ███╗ ##
## ██╔══██╗ ██╔════╝ ██╔══██╗ ██║    ██║ ████╗ ████║ ##
## ██████╔╝ ███████╗ ██████╔╝ ██║ █╗ ██║ ██╔████╔██║ ##
## ██╔══██╗ ╚════██║ ██╔═══╝  ██║███╗██║ ██║╚██╔╝██║ ##
## ██████╔╝ ███████║ ██║      ╚███╔███╔╝ ██║ ╚═╝ ██║ ##
## ╚═════╝  ╚══════╝ ╚═╝       ╚══╝╚══╝  ╚═╝     ╚═╝ ##
#######################################################

## important variables
read -r RICETHEME <$XDG_CONFIG_HOME/bspwm/scripts/.rice
export RICETHEME
PATH=$PATH:$XDG_CONFIG_HOME/bspwm/scripts
rice_dir=$XDG_CONFIG_HOME/bspwm/rices/$RICETHEME

## Fix java applications
export _JAVA_AWT_WM_NONREPARENTING=1
export JDK_JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'

## setup connected monitors #
NUM_OF_MONITORS=$(xrandr --listmonitors | grep -c "^ ") # No. monitors #

# If more than One monitor gets detected, with this "If" statement and using the
# variable enclosing the command substitution above it will then run the `multimonitor`
# script saved on my Os path "$HOME/.config/bspwm/scripts/display-inoutput/multimonitor"

if [[ "$NUM_OF_MONITORS" -ge 1 ]]; then
	$XDG_CONFIG_HOME/bspwm/scripts/display-inoutput/multimonitor
fi

## workspace
# I as a preference use numbers instead of "Icons" for the workspaces, but "Icons" can be assigned
# if exclusive workspaces are intended or preference, on "https://www.nerdfonts.com/cheat-sheet"
# and "https://fontawesome.com/search" search and copy/paste the icons substituting the numbers on this config file.
#
# Windows-Key = 
# Windows-Key2 = 󰨡
# Windows-Key3 = 󰖳
# Terminal = 
# Terminal = 
# Terminal = 
# Distribution-Logo-Debian = 
# Distribution-Logo-Arch = 󰣇
# Distribution-Logo-Arch2 = 
# Distribution-Logo-fedora = 
# Distribution-Logo-fedora = 

workspaces() {
	name=1
	for monitor in $(bspc query -M); do
		bspc monitor "$monitor" -n "$name" -d '1' '2' '3' '4' '5' '6'
		bspc monitor "$monitor" -n "$name" -d '' '' '' '' '' ''

		((name++))
	done
}
workspaces

bspc config external_rules_command $XDG_CONFIG_HOME/bspwm/scripts/window-manager/ExternalRules

# Set refresh rate to 50Hz
xrandr --rate 70 &

### BSPWM CONFIGURATION
# To know which/what rules are taking place in the current BSPWM session execute:
# `bspc rules -l` to list them

# This are all the `bspc config` options:
#  normal_border_color
#  active_border_color
#  focused_border_color
#  presel_feedback_color
#  split_ratio
#  status_prefix
#  external_rules_command
#  automatic_scheme
#  initial_polarity
#  directional_focus_tightness
#  removal_adjustment
#  presel_feedback
#  borderless_monocle
#  gapless_monocle
#  top_monocle_padding
#  right_monocle_padding
#  bottom_monocle_padding
#  left_monocle_padding
#  single_monocle
#  borderless_singleton
#  pointer_motion_interval
#  pointer_modifier
#  pointer_action1
#  pointer_action2
#  click_to_focus
#  swallow_first_click
#  pointer_follows_monitor
#  mapping_events_count
#  ignore_ewmh_focus
#  ignore_ewmh
#  ignore_ewmh_struts
#  center_pseudo_tiled
#  remove_disabled_monitors
#  remove_unplugged_monitors
#  merge_overlapping_monitors

bspc config border_radius 8
bspc config border_width 4
bspc config window_gap 10
bspc config top_padding 25
bspc config bottom_padding 25
bspc config left_padding 0
bspc config right_padding 0
bspc config single_monocle true
bspc config click_to_focus true
bspc config history_aware_focus true
bspc config pointer_modifier mod4
bspc config pointer_motion_interval 5
bspc config pointer_action1 move
bspc config pointer_action2 resize_side
bspc config pointer_action3 resize_corner
bspc config remove_disabled_monitors true
bspc config merge_verlapping_monitors true

bspc config split_ratio 0.52
bspc config borderless_monocle false
bspc config gapless_monocle false

bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off
bspc rule -a monocle false
bspc config focus_follows_pointer true
bspc config pointer_follows_focus false

# Windows Border Settings
bspc config focused_border_color "#3888A0"
bspc config normal_border_color "#D4D4D4"
bspc config active_border_color "#073642"
bspc config inactive_border_color "#24BEB0"
bspc config normal_border_color "#5D6ADE"
bspc config active_border_color "#5D1CE6"

# bspc wm --adopt-orphans
bspc rule -a scratch sticky=on state=floating focus=on

### Launching Rices

# Set system vars for polybar
. $XDG_CONFIG_HOME/bspwm/scripts/SetSysVars

# Terminate already running polybar, eww, picom, sxhkd and dunst instances
processes=("picom" "polybar" "eww" "sxhkd" "dunst")

for process in "${processes[@]}"; do
	if pidof -q $process; then
		pkill -9 -x $process 2>/dev/null
		sleep 0.1
	fi
done

# Load colors, dunst, bars and/or eww widgets
. $rice_dir/Theme.sh

# Launch picom // If you have old hardware or encounter problems
# uncomment the picom '--legacy-backends' line and comment the current one.
picom --config $XDG_CONFIG_HOME/.config/picom/picom.conf &
#picom --legacy-backends --config "$HOME"/.config/bspwm/picom.conf &

# Launch dunst notification daemon
dunst -config $XDG_CONFIG_HOME/bspwm/dunstrc &

# Set random wallpaper for actual rice
feh -z --no-fehbg --bg-fill $rice_dir/walls
#feh --no-fehbg --bg-fill path-to-your-png

# Reload sxhkd daemon
sxhkd -c $XDG_CONFIG_HOME/sxhkd/sxhkdrc &

# Launch polkit
pidof -q polkit-gnome-authentication-agent-1 || { /usr/libexec/polkit-gnome-authentication-agent-1 & }

# Fix cursor
xsetroot -cursor_name left_ptr

### If a second monitor gets detected and assigned the below `bspc` configurations will be assigned
# Secondary Monitor Setup
bspc config -m 2 top_padding 3
bspc config -m 2 bottom_padding 3
bspc config -m 2 right_padding 3
bspc config -m 2 left_padding 3
